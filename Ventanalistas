package Datalive;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import com.mysql.jdbc.PreparedStatement;

public class Ventanalistas extends JFrame{
	private static final long serialVersionUID = 1L;
	public JPanel panel;
	public static DefaultTableModel modelo;
	private int totalSum;
	private int totalsemana;
	
	
	@SuppressWarnings("static-access")
	public Ventanalistas(){
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setTitle("Operaciones");
		this.getContentPane().setBackground(Color.WHITE);
		this.setExtendedState(this.MAXIMIZED_BOTH);
		InicioComponentes();
	}
	
	public void InicioComponentes(){
		ColocarPaneles();
		Colocarbotones();
		Tabla();
	}
	
	public void Tabla(){
		
	    modelo = new DefaultTableModel();
	    JScrollPane scroll = new JScrollPane();
	    final JTable tabla = new JTable(modelo);
	    JButton borrar=new JButton("Borrar");
		borrar.setBounds(800, 10, 100, 85);
		borrar.setForeground(Color.BLACK);
		borrar.setFont(new Font("arial", Font.BOLD, 20));
		JButton cobrar=new JButton("Cobrar");
		cobrar.setBounds(690, 10, 100, 85);
		cobrar.setForeground(Color.BLACK);
		cobrar.setFont(new Font("arial", Font.BOLD, 20));
		JButton cierredecaja=new JButton("Cierre de caja");
		cierredecaja.setBounds(400, 10, 200, 85);
		cierredecaja.setForeground(Color.BLACK);
		cierredecaja.setFont(new Font("arial", Font.BOLD, 20));
		panel.add(borrar);
	    panel.add(cobrar);
	    panel.add(cierredecaja);
	     

		String pedido[] = {"Codigo pedido", "Tipo pedido", "Producto", "Cantidad", "Id stock", "Id cliente", "Total"};
	    modelo.setColumnIdentifiers(pedido);

	    tabla.getColumnModel().getColumn(0).setPreferredWidth(20); 
	    tabla.getColumnModel().getColumn(1).setPreferredWidth(70); 
	    tabla.getColumnModel().getColumn(2).setPreferredWidth(130); 
	    tabla.getColumnModel().getColumn(3).setPreferredWidth(20); 
	    tabla.getColumnModel().getColumn(4).setPreferredWidth(20); 
	    tabla.getColumnModel().getColumn(5).setPreferredWidth(20); 
	    tabla.getColumnModel().getColumn(6).setPreferredWidth(70); 
	    tabla.setBounds(12, 100, 1000, 430);
	    scroll.setBounds(12, 100, 1000, 430);
	    scroll.setViewportView(tabla);
	   	panel.add(scroll);				
	
	   	ActionListener desplegador6 = new ActionListener() {
	   	    @Override
	   	    public void actionPerformed(ActionEvent ae) {
	   	        int filaSeleccionada = tabla.getSelectedRow();
	   	        if (filaSeleccionada >= 0) {
	   	            // Obtener el ID_STOCK del producto seleccionado
	   	            int idStock = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 4).toString());
	   	            int codCliente = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 5).toString());
	   	            int codPedido = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 0).toString());
	   	            int cantidadEliminada = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 3).toString());

	   	            try {
	   	            	Conexion con = new Conexion();
			            Connection Conexion = con.conectar();
			            
		                String sqlEliminarPedido = "DELETE FROM PEDIDOS WHERE COD_PEDIDOS = ?";
		                PreparedStatement stmtEliminarPedido = (PreparedStatement) Conexion.prepareStatement(sqlEliminarPedido);
		                stmtEliminarPedido.setInt(1, codPedido);
		                stmtEliminarPedido.executeUpdate();
		                String sqlEliminarCliente = "DELETE FROM CLIENTES WHERE ID_CLIENTE = ?";
		                PreparedStatement stmtEliminarCliente = (PreparedStatement) Conexion.prepareStatement(sqlEliminarCliente);
		                stmtEliminarCliente.setInt(1, codCliente);
		                stmtEliminarCliente.executeUpdate();
	   	                String sqlRestarStock = "UPDATE STOCK SET CANTIDAD_STOCK = CANTIDAD_STOCK - ? WHERE id_stock = ?";
	   	                PreparedStatement stmt = (PreparedStatement) Conexion.prepareStatement(sqlRestarStock);
	   	                stmt.setInt(1, cantidadEliminada);
	   	                stmt.setInt(2, idStock);
	   	                stmt.executeUpdate();
	   	                stmt.close();
	   	                stmtEliminarPedido.close();
	   	                stmtEliminarCliente.close();
	   	            } catch (SQLException ex) {
	   	                ex.printStackTrace();
	   	            }

	   	            // Luego puedes eliminar la fila de la tabla
	   	            modelo.removeRow(filaSeleccionada);
	   	        }
	   	    }
	   	};
	   	borrar.addActionListener(desplegador6);
	   	
	   	ActionListener desplegador2=new ActionListener() {
	 		@Override
	 		public void actionPerformed(ActionEvent ae){
	 			int filaSeleccionada = tabla.getSelectedRow();
	 			if (filaSeleccionada >= 0){
	 				int idStock = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 4).toString());
	 				int codPedido = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 0).toString());
	   	            int cantidadEliminada = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 3).toString());
	   	            int codCliente = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 5).toString());
	 				try {
	   	            	Conexion con = new Conexion();
			            Connection Conexion = con.conectar();
			            
			            String sqlEliminarPedido = "DELETE FROM PEDIDOS WHERE COD_PEDIDOS = ?";
		                PreparedStatement stmtEliminar = (PreparedStatement) Conexion.prepareStatement(sqlEliminarPedido);
		                stmtEliminar.setInt(1, codPedido);
		                stmtEliminar.executeUpdate();
		                String sqlEliminarCliente = "DELETE FROM CLIENTES WHERE ID_CLIENTE = ?";
		                PreparedStatement stmtEliminarCliente = (PreparedStatement) Conexion.prepareStatement(sqlEliminarCliente);
		                stmtEliminarCliente.setInt(1, codCliente);
		                stmtEliminarCliente.executeUpdate();
	   	                String sqlRestarStock = "UPDATE STOCK SET CANTIDAD_STOCK = CANTIDAD_STOCK - ? WHERE id_stock = ?";
	   	                PreparedStatement stmt = (PreparedStatement) Conexion.prepareStatement(sqlRestarStock);
	   	                stmt.setInt(1, cantidadEliminada);
	   	                stmt.setInt(2, idStock);
	   	                stmt.executeUpdate();
	   	                stmt.close();
	   	            } catch (SQLException ex) {
	   	                ex.printStackTrace();
	   	            }
	 				 int[] filasSeleccionadas = tabla.getSelectedRows();  
	 		        for (int fila : filasSeleccionadas) {
	 		            int totalValue = Integer.parseInt(modelo.getValueAt(fila, 6).toString()); 
	 		            totalSum += totalValue;
	 		            totalsemana+=totalSum;
	 		        }
	 				modelo.removeRow(filaSeleccionada);
	 			}
	 		}
	 			
	 		};
	 		cobrar.addActionListener(desplegador2);
	 		
	 		ActionListener desplegador3=new ActionListener() {
		 		@Override
		 		public void actionPerformed(ActionEvent ae){
		 			if (Ventanacierredecaja.bool == true) {
		 	            totalSum = 0;
		 	        }
		 			else if (Ventanacierredecaja.bool == true) {
		 	            totalsemana = 0;
		 	        }
		 			Ventanacierredecaja cierredecaja=new Ventanacierredecaja(totalSum, totalsemana);
		 			cierredecaja.setVisible(true);
		 		}
		 			
		 		};
		 		cierredecaja.addActionListener(desplegador3);
	}
	
	public void ColocarPaneles(){
		panel= new JPanel();
		panel.setBackground(Color.GRAY);
		panel.setLayout(null);
		this.getContentPane().add(panel);
	}
	
	public void Colocarbotones(){
		 JButton Pedidomostrador = new JButton("Tomar Pedido Mostrador");
		 JButton Pedidodelivery = new JButton("Tomar Pedido Delivery");
		 Pedidomostrador.setBounds(995, 30, 210, 30);
		 Pedidodelivery.setBounds(500, 500, 210, 30);
	     Pedidomostrador.setForeground(Color.BLACK);
	     Pedidodelivery.setForeground(Color.BLACK);
		 Pedidomostrador.setFont(new Font("arial", Font.BOLD, 15));
		 Pedidodelivery.setFont(new Font("arial", Font.BOLD, 15));
		 JButton regresar = new JButton("Regresar");
		 regresar.setBounds(30, 780, 150, 30);
		 regresar.setForeground(Color.BLACK);
		 regresar.setFont(new Font("arial", Font.BOLD, 25));
		 JButton productos=new JButton("Ver productos");
		 productos.setBounds(13, 10, 169, 85);
		 productos.setForeground(Color.BLACK);
		 productos.setFont(new Font("arial", Font.BOLD, 20));
		 JButton stock=new JButton("Ver stock");
		 stock.setBounds(190, 10, 130, 85);
		 stock.setForeground(Color.BLACK);
		 stock.setFont(new Font("arial", Font.BOLD, 20));
		 panel.add(productos);
		 panel.add(regresar);
	     panel.add(Pedidomostrador);
	     panel.add(Pedidodelivery);
	     panel.add(stock);
	 
	     ActionListener desplegador=new ActionListener() {
	 		@Override
	 		public void actionPerformed(ActionEvent ae){
	 			Ventana nuevo=new Ventana();
	 			nuevo.setVisible(true);
	 			dispose();
	 		}
	 			
	 		};
	 		regresar.addActionListener(desplegador);
	 		
	 		ActionListener desplegador2=new ActionListener() {
		 		@Override
		 		public void actionPerformed(ActionEvent ae){
					Pedidomostrador muestreo=new Pedidomostrador();
					muestreo.setVisible(true);
		 		}
		 			
		 		};
		 		Pedidomostrador.addActionListener(desplegador2);
		 	ActionListener desplegador3=new ActionListener() {
				@Override
			 	public void actionPerformed(ActionEvent ae){
					Pedidodelivery muestreo2=new Pedidodelivery();
				    muestreo2.setVisible(true);
			 	}
			 		
				};
			 	Pedidodelivery.addActionListener(desplegador3);
			 	
			 ActionListener desplegador4=new ActionListener() {
				@Override
		 		public void actionPerformed(ActionEvent ae){
		 			Listaproductos nuevo=new Listaproductos();
		 			nuevo.setVisible(true);
			 	}
						
		 		};
		 		productos.addActionListener(desplegador4);
		 		
		 	ActionListener desplegador5=new ActionListener() {
				@Override
		 		public void actionPerformed(ActionEvent ae){
		 			Listastock nuevo=new Listastock();
		 			nuevo.setVisible(true);
			 	}
							
		 		};
		 		stock.addActionListener(desplegador5);
	}
	
	
	
	
	}

